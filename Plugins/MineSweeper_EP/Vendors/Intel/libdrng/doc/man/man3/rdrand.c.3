.TH "C:/Users/johnm/Documents/For ProtexIP/libdrng-1.0/rdrand.c" 3 "Thu Jul 16 2015" "DRNG Library" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/johnm/Documents/For ProtexIP/libdrng-1.0/rdrand.c \- APIs for rdrand functions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'drng\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRDRAND_MASK\fP   0x40000000"
.br
.ti -1c
.RI "#define \fBRETRY_LIMIT\fP   10"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint32_t \fB_wordlen_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBRdRand_cpuid\fP ()"
.br
.RI "\fIQueries cpuid to see if rdrand is supported and caches the result\&. \fP"
.ti -1c
.RI "int \fBRdRand_isSupported\fP ()"
.br
.RI "\fIDetermines whether or not rdrand is supported by the CPU\&. \fP"
.ti -1c
.RI "int \fBrdrand_16\fP (uint16_t *x, int retry)"
.br
.RI "\fICalls rdrand for a 16-bit result\&. \fP"
.ti -1c
.RI "int \fBrdrand_32\fP (uint32_t *x, int retry)"
.br
.RI "\fICalls rdrand for a 32-bit result\&. \fP"
.ti -1c
.RI "int \fBrdrand_get_n_32\fP (unsigned int n, uint32_t *dest)"
.br
.RI "\fICalls rdrand to obtain multiple 32-byte results\&. \fP"
.ti -1c
.RI "int \fBrdrand_get_bytes\fP (unsigned int n, unsigned char *dest)"
.br
.RI "\fICalls rdrand to fill a buffer of arbitrary size with random bytes\&. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "int \fBrdrand_support_cache\fP = \fBDRNG_SUPPORT_UNKNOWN\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
APIs for rdrand functions\&. 

This is the rdrand library file which exposes different APIs for 32- and 64-bit systems\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define RDRAND_MASK   0x40000000"
The bit mask used to examine the ecx register returned by cpuid\&. The 30th bit is set\&. 
.SH "Function Documentation"
.PP 
.SS "int rdrand_16 (uint16_t * x, int retry)"

.PP
Calls rdrand for a 16-bit result\&. This function calls rdrand requesting a 16-bit result\&. By default, it will perform only a single call to rdrand, returning success or failure\&. On success, the data is written to memory pointed to by x\&. On failure an error is returned unless the int retry is true (non-zero), in which case the function will retry rdrand up to 10 times for a successful result before returning an error\&.
.PP
This function also ensures that rdrand is supported by the cpu or fails gracefully\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP pointer to memory to store the random result 
.br
\fIretry\fP int to determine whether or not to loop until rdrand succeeds or until 10 failed attempts
.RE
.PP
\fBReturns:\fP
.RS 4
whether or not the call was successful, or supported at all 
.RE
.PP

.SS "int rdrand_32 (uint32_t * x, int retry)"

.PP
Calls rdrand for a 32-bit result\&. This function calls rdrand requesting a 32-bit result\&. By default, it will perform only a single call to rdrand, returning success or failure\&. On success, the data is written to memory pointed to by x\&. On failure an error is returned unless the int retry is true (non-zero), in which case the function will retry rdrand up to 10 times for a successful result before returning an error\&.
.PP
This function also ensures that rdrand is supported by the cpu or fails gracefully\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP pointer to memory to store the random result 
.br
\fIretry\fP int to determine whether or not to loop until rdrand succeeds or until 10 failed attempts
.RE
.PP
\fBReturns:\fP
.RS 4
whether or not the call was successful, or supported at all 
.RE
.PP

.SS "int RdRand_cpuid ()"

.PP
Queries cpuid to see if rdrand is supported and caches the result\&. rdrand support in a CPU is determined by examining the 30th bit of the ecx register after calling cpuid\&.
.PP
\fBReturns:\fP
.RS 4
bool of whether or not rdrand is supported 
.RE
.PP

.SS "int rdrand_get_bytes (unsigned int n, unsigned char * buffer)"

.PP
Calls rdrand to fill a buffer of arbitrary size with random bytes\&. This function calls rdrand requesting multiple 64- or 32-bit results to fill a buffer of arbitrary size\&.
.PP
\fBParameters:\fP
.RS 4
\fIn\fP size of the buffer to fill with random bytes 
.br
\fIbuffer\fP pointer to memory to store the random result
.RE
.PP
\fBReturns:\fP
.RS 4
whether or not the call was successful, or supported at all 
.RE
.PP

.SS "int rdrand_get_n_32 (unsigned int n, uint32_t * x)"

.PP
Calls rdrand to obtain multiple 32-byte results\&. This function calls rdrand requesting multiple 32-byte results\&. On success, the data is written to memory pointed to by x\&. This function calls rdrand_32 and if any of those invocations fail, this function fails\&. It returns the same values as rdrand_32\&.
.PP
\fBParameters:\fP
.RS 4
\fIn\fP total number of 32-bit random values to generate 
.br
\fIx\fP pointer to memory buffer to fill with 32-bit random values 
.RE
.PP

.SS "int RdRand_isSupported ()"

.PP
Determines whether or not rdrand is supported by the CPU\&. This function calls cpuid to determine rdrand support and caches the result in a static variable\&. This prevents calling cpuid on subsequent invocations\&.
.PP
\fBReturns:\fP
.RS 4
bool/int of whether or not rdrand is supported 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for DRNG Library from the source code\&.
